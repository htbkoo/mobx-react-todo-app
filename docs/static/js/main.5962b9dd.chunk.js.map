{"version":3,"sources":["Todo.tsx","TodoStore.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todo","_class","title","Object","classCallCheck","this","id","Math","random","initializerDefineProperty","_descriptor","_descriptor2","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","TodoStore","todos","push","length","filter","todo","finished","computed","TodoListComponent","observer","todoStore","props","react_default","a","createElement","map","idx","TodoItemComponent","key","concat","numRemaining","size","React","Component","_ref","InputGroup","className","Prepend","Checkbox","aria-label","checked","onChange","FormControl","disabled","value","TodoAddComponent","handleTaskChange","_ref2","currentTarget","_this","task","handleAddTodo","addTodo","_this2","placeholder","aria-describedby","event","Append","Button","variant","onClick","App","Container","Row","Col","App_TodoAddComponent","App_TodoListComponent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5962b9dd.chunk.js","sourcesContent":["import {observable} from \"mobx\";\r\n\r\nexport class Todo {\r\n    readonly id = Math.random();\r\n    @observable title = \"\";\r\n    @observable finished = false;\r\n\r\n    constructor(title: string) {\r\n        this.title = title;\r\n    }\r\n}","import React from 'react';\nimport {computed, observable} from \"mobx\";\n\nimport {Todo} from \"./Todo\";\n\nclass TodoStore {\n    @observable readonly todos: Todo[] = [];\n\n    @computed get size() {\n        return this.todos.length;\n        // return 0;\n    }\n\n    @computed get numRemaining() {\n        return this.todos.filter(todo => !todo.finished).length;\n    }\n\n    public addTodo(title: string) {\n        this.todos.push(new Todo(title));\n    }\n}\n\nexport {TodoStore};\n","import React from 'react';\nimport {observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\n\nimport './App.css';\nimport {Todo} from \"./Todo\";\nimport {TodoStore} from \"./TodoStore\";\nimport {Button, Col, Container, FormControl, InputGroup, Row} from \"react-bootstrap\";\n\ninterface TodoListComponentProps {\n    todoStore: TodoStore\n}\n\n@observer\nclass TodoListComponent extends React.Component<TodoListComponentProps> {\n    render() {\n        const {todoStore} = this.props;\n        return (\n            <div>\n                {todoStore.todos.map((todo, idx) => (\n                    <TodoItemComponent todo={todo} key={`${todo.title}_${todo.id}_${idx}`}/>))}\n                #Tasks: {todoStore.numRemaining} / {todoStore.size}\n            </div>\n        )\n    }\n}\n\nfunction TodoItemComponent({todo}: { todo: Todo }) {\n    return (\n        <div>\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                    <InputGroup.Checkbox aria-label=\"Is todo completed\" checked={todo.finished}\n                                         onChange={() => todo.finished = !todo.finished}/>\n                </InputGroup.Prepend>\n                <FormControl aria-label=\"Todo task title\" disabled value={todo.title}/>\n            </InputGroup>\n        </div>\n    )\n}\n\n@observer\nclass TodoAddComponent extends React.Component<TodoListComponentProps> {\n    @observable private task: string = '';\n\n    handleTaskChange = ({currentTarget: {value}}: React.SyntheticEvent<HTMLInputElement>) => {\n        this.task = value;\n    };\n\n    handleAddTodo = () => {\n        this.props.todoStore.addTodo(this.task);\n        this.task = '';\n    };\n\n    render() {\n        return (\n            <div>\n                <InputGroup className=\"mb-3\">\n                    <FormControl\n                        placeholder=\"Add new task\"\n                        aria-label=\"Add new task\"\n                        aria-describedby=\"basic-addon2\"\n                        value={this.task}\n                        onChange={event => this.task = event.currentTarget.value}\n                    />\n                    <InputGroup.Append>\n                        <Button variant=\"outline-secondary\" onClick={this.handleAddTodo}>Add</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </div>\n        )\n    }\n}\n\nconst todoStore = new TodoStore();\n\nconst App: React.FC = () => {\n    return (\n        <Container className=\"App\">\n            <Row>\n                <Col>\n                    <TodoAddComponent todoStore={todoStore}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <TodoListComponent todoStore={todoStore}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}